name: Автосборка скрипта

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Клонировать репо
        uses: actions/checkout@v3

      - name: Показать список файлов
        run: ls -la

      - name: Установить Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Выполнить сборку
        run: |
          # Путь к исходному скрипту и целевому
          INPUT_SCRIPT="Beeline DMC Data Extractor.js"
          OUTPUT_SCRIPT="Beeline-DMC-Data-Extractor.auto.user.js"

          # Проверяем наличие файла
          if [ ! -f "$INPUT_SCRIPT" ]; then
            echo "❌ Файл $INPUT_SCRIPT не найден!"
            exit 1
          fi

          # Получаем текущую версию из @version
          VERSION=$(grep -oP '@version\\s+\\K[^ ]+' "$INPUT_SCRIPT")

          echo "Текущая версия: $VERSION"

          # Вставляем автоапдейтер и обновляем метаданные
          cat > "$OUTPUT_SCRIPT" << EOF
          // ==UserScript==
          // @name         Beeline DMC Data Extractor + AutoUpdater
          // @namespace    http://tampermonkey.net/
          // @version      $VERSION
          // @description  Извлечение данных из Beeline DMC с возможностью автообновления и уведомлением о последнем коммите
          // @author       zOnVolga
          // @match        https://dmc.beeline.ru/*
          // @grant        GM_xmlhttpRequest
          // @grant        GM_notification
          // @grant        GM_getValue
          // @grant        GM_setValue
          // @connect      raw.githubusercontent.com
          // @connect      api.github.com
          // @downloadURL  https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/Beeline-DMC-Data-Extractor.auto.user.js
          // @updateURL    https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/Beeline-DMC-Data-Extractor.auto.user.js
          // @icon         https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/icon-beeline-yellow.svg
          // ==/UserScript==

          (function() {
              'use strict';
              console.log("Beeline DMC Data Extractor Auto v$VERSION");
          })();

          // === [Автоапдейтер] ===
          (function checkForUpdates() {
              const scriptName = 'Beeline DMC Data Extractor';
              const repoOwner = 'zOnVolga';
              const repoName = 'DMC_scripts';
              const filePath = 'Beeline%20DMC%20Data%20Extractor.js'; // URL-encoded filename
              const rawUrl = \`https://raw.githubusercontent.com/\${repoOwner}/\${repoName}/main/\${filePath}\`;
              const apiUrl = \`https://api.github.com/repos/\${repoOwner}/\${repoName}/commits?path=\${encodeURIComponent(filePath)}&page=1&per_page=1\`;

              function getVersionFromString(content) {
                  const versionMatch = content.match(/\/\/\s*@version\s*([0-9.\-]+)/);
                  return versionMatch ? versionMatch[1].trim() : null;
              }

              function compareVersions(v1, v2) {
                  const parts1 = v1.split('.').map(Number);
                  const parts2 = v2.split('.').map(Number);
                  for (let i = 0; i < Math.max(parts1.length, parts2.length); i++) {
                      if ((parts1[i] || 0) > (parts2[i] || 0)) return 1;
                      if ((parts1[i] || 0) < (parts2[i] || 0)) return -1;
                  }
                  return 0;
              }

              GM_xmlhttpRequest({
                  method: 'GET',
                  url: rawUrl,
                  onload: function(response) {
                      if (response.status === 200) {
                          const remoteVersion = getVersionFromString(response.responseText);
                          const localVersion = GM_getValue('localVersion', '0.0.0');

                          if (!remoteVersion) {
                              console.error('Не найдена версия в удаленном скрипте');
                              return;
                          }

                          if (compareVersions(remoteVersion, localVersion) > 0) {
                              console.log(\`Доступна новая версия: \${remoteVersion} (твоя: \${localVersion})\`);

                              fetch(apiUrl)
                                  .then(res => res.json())
                                  .then(commits => {
                                      if (commits.length > 0) {
                                          const commit = commits[0];
                                          const message = commit.commit.message;
                                          const author = commit.author?.login || commit.commit.author.name;
                                          const date = new Date(commit.commit.author.date).toLocaleString();

                                          GM_notification({
                                              title: 'Доступно обновление',
                                              text: \`\${scriptName} v\${remoteVersion}\n\n"\${message}"\nАвтор: \${author}\nДата: \${date}\n→ Нажми, чтобы обновить\`,
                                              timeout: 15,
                                              onclick: () => window.open(rawUrl)
                                          });
                                      }
                                  })
                                  .catch(err => {
                                      console.error('Ошибка при получении информации о коммите:', err);
                                  });

                          } else {
                              console.log(\`Текущая версия актуальна: \${localVersion}\`);
                          }
                      }
                  },
                  onerror: function(err) {
                      console.error('Ошибка при проверке обновления:', err);
                  }
              });

              const thisScriptVersion = getVersionFromString(document.currentScript.textContent);
              const currentVersion = GM_getValue('localVersion', '0.0.0');

              if (thisScriptVersion && compareVersions(thisScriptVersion, currentVersion) > 0) {
                  GM_setValue('localVersion', thisScriptVersion.trim());
                  console.log(\`✅ Обнаружена новая локальная версия: \${thisScriptVersion}\`);
              }

              setTimeout(checkForUpdates, 6 * 60 * 60 * 1000);
          })();
          EOF

      - name: Зафиксировать изменения
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "$OUTPUT_SCRIPT" && git commit -m "Обновлено: $OUTPUT_SCRIPT" || echo "Нет изменений для фиксации"

      - name: Залить изменения
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          force: true
