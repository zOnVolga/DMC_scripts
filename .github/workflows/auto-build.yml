name: –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞ Beeline DMC Data Extractor

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 */6 * * *' # –†–∞–∑ –≤ 6 —á–∞—Å–æ–≤

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        id: get_version
        run: |
          INPUT_SCRIPT="Beeline_DMC_Data_Extractor.js"

          if [ ! -f "$INPUT_SCRIPT" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞: '$INPUT_SCRIPT' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
          fi

          VERSION=$(grep -oP '@version\\s+\\K[^ ]+' "$INPUT_SCRIPT")
          echo "version=$VERSION" >> "$GITHUB_ENV"

      - name: –°–æ–±—Ä–∞—Ç—å .user.js
        run: |
          OUTPUT_SCRIPT="Beeline-DMC-Data-Extractor.auto.user.js"
          SCRIPT_URL="https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/Beeline_DMC_Data_Extractor.js"

          cat > "$OUTPUT_SCRIPT" << EOF
          // ==UserScript==
          // @name         Beeline DMC Data Extractor + AutoUpdater
          // @namespace    http://tampermonkey.net/
          // @version      ${{ env.version }}
          // @description  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Beeline DMC —Å –∞–≤—Ç–æ–∞–ø–¥–µ–π—Ç–µ—Ä–æ–º
          // @author       zOnVolga
          // @match        https://dmc.beeline.ru/*
          // @grant        GM_xmlhttpRequest
          // @grant        GM_notification
          // @grant        GM_getValue
          // @grant        GM_setValue
          // @connect      raw.githubusercontent.com
          // @connect      api.github.com
          // @downloadURL  https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/Beeline-DMC-Data-Extractor.auto.user.js
          // @updateURL    https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/Beeline-DMC-Data-Extractor.auto.user.js
          // @icon         https://raw.githubusercontent.com/zOnVolga/DMC_scripts/main/icon-beeline-yellow.svg
          // ==/UserScript==

          (function() {
              'use strict';

              console.log("‚úÖ Beeline DMC Data Extractor –∑–∞–ø—É—â–µ–Ω");

              const script = document.createElement('script');
              script.src = '$SCRIPT_URL';
              (document.head || document.documentElement).appendChild(script);

              // === [–ê–≤—Ç–æ–∞–ø–¥–µ–π—Ç–µ—Ä] ===
              (function checkForUpdates() {
                  const scriptName = 'Beeline DMC Data Extractor';
                  const repoOwner = 'zOnVolga';
                  const repoName = 'DMC_scripts';
                  const filePath = 'Beeline_DMC_Data_Extractor.js'; // URL-encoded filename
                  const rawUrl = 'https://raw.githubusercontent.com/' + repoOwner + '/' + repoName + '/main/' + filePath;
                  const apiUrl = 'https://api.github.com/repos/' + repoOwner + '/' + repoName + '/commits?path=' + encodeURIComponent(filePath) + '&page=1&per_page=1'

                  function getVersionFromString(content) {
                      const versionMatch = content.match(/\/\/\s*@version\s*([0-9.\-]+)/);
                      return versionMatch ? versionMatch[1].trim() : null;
                  }

                  function compareVersions(v1, v2) {
                      const parts1 = v1.split('.').map(Number);
                      const parts2 = v2.split('.').map(Number);
                      for (let i = 0; i < Math.max(parts1.length, parts2.length); i++) {
                          if ((parts1[i] || 0) > (parts2[i] || 0)) return 1;
                          if ((parts1[i] || 0) < (parts2[i] || 0)) return -1;
                      }
                      return 0;
                  }

                  GM_xmlhttpRequest({
                      method: 'GET',
                      url: rawUrl,
                      onload: function(response) {
                          if (response.status === 200 && response.responseText) {
                              const remoteVersion = getVersionFromString(response.responseText);
                              const localVersion = GM_getValue('localVersion', '0.0.0');

                              if (!remoteVersion) {
                                  console.error('‚ùå –í–µ—Ä—Å–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                                  return;
                              }

                              if (compareVersions(remoteVersion, localVersion) > 0) {
                                  console.log(\`üîî –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: \${remoteVersion}\`);

                                  fetch(apiUrl)
                                      .then(res => res.json())
                                      .then(commits => {
                                          if (commits.length > 0) {
                                              const commit = commits[0];
                                              const message = commit.commit.message;
                                              const author = commit.author?.login || commit.commit.author.name;
                                              const date = new Date(commit.commit.author.date).toLocaleString();

                                              GM_notification({
                                                  title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                                                  text: \`\n\${scriptName} v\${remoteVersion}\n\n"${message}"\n–ê–≤—Ç–æ—Ä: \${author}\n–î–∞—Ç–∞: \${date}\n‚Üí –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å\`,
                                                  timeout: 15,
                                                  onclick: () => window.open(rawUrl)
                                              });
                                          }
                                      })
                                      .catch(err => {
                                          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ:', err);
                                      });

                          } else {
                              console.log(\`‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: \${localVersion}\`);
                          }
                      },
                      onerror: function(err) {
                          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
                      }
                  });

                  const thisScriptVersion = getVersionFromString(document.currentScript.textContent);
                  if (thisScriptVersion && compareVersions(thisScriptVersion, localVersion) > 0) {
                      GM_setValue('localVersion', thisScriptVersion.trim());
                      console.log(\`üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: \${thisScriptVersion}\`);
                  }

                  setTimeout(checkForUpdates, 6 * 60 * 60 * 1000);
              })();
          })();
          EOF

      - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Git —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        run: |
          git config --local user.email "zon.volga@gmail.com"
          git config --local user.name "zOnVolga"

      - name: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
